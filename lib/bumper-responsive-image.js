// Generated by CoffeeScript 1.9.3

/*
 * * bumper | responsive | image
 * * https://github.com/brewster1134/bumper
 * *
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  (function(factory) {
    if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
      return define(['bumper-core', 'bumper-responsive-breakpoint'], function(Core, ResponsiveBreakpoint) {
        return factory(Core, ResponsiveBreakpoint);
      });
    } else {
      return factory(window.Bumper.Core, window.Bumper.Responsive.Breakpoint);
    }
  })(function(Core, ResponsiveBreakpoint) {
    var BumperResponsiveImage, base, base1;
    BumperResponsiveImage = (function(superClass) {
      extend(BumperResponsiveImage, superClass);

      function BumperResponsiveImage() {
        return BumperResponsiveImage.__super__.constructor.apply(this, arguments);
      }

      BumperResponsiveImage.prototype.events = function() {
        var responsiveObserver;
        window.addEventListener('load', (function(_this) {
          return function() {
            return _this.resizeAll();
          };
        })(this));
        window.addEventListener('bumper-responsive-breakpoint-change', (function(_this) {
          return function() {
            return _this.resizeAll();
          };
        })(this));
        responsiveObserver = new MutationObserver((function(_this) {
          return function() {
            return _this.resizeAll();
          };
        })(this));
        responsiveObserver.observe(document, {
          childList: true,
          subtree: true
        });
        return this;
      };

      BumperResponsiveImage.prototype.resizeAll = function() {
        var i, image, images, len;
        images = document.querySelectorAll('.bumper-responsive-image');
        for (i = 0, len = images.length; i < len; i++) {
          image = images[i];
          try {
            this.resize(image);
          } catch (_error) {}
        }
        return images;
      };

      BumperResponsiveImage.prototype.resize = function(el, breakpoint, force) {
        var fullUrl, img, ref, ref1;
        if (force == null) {
          force = false;
        }
        if (el.jquery) {
          el = el[0];
        }
        breakpoint || (breakpoint = (ref = window.Bumper.Responsive.Breakpoint) != null ? ref.getCurrent() : void 0);
        fullUrl = this.getUrl(el, breakpoint);
        if (!fullUrl) {
          return false;
        }
        if (force === false && (((ref1 = el.getAttribute('src')) != null ? ref1.indexOf(fullUrl) : void 0) >= 0 || el.style.backgroundImage.indexOf(fullUrl) >= 0)) {
          return fullUrl;
        }
        if (el.tagName === 'IMG') {
          img = el;
          img.addEventListener('load', function() {
            var event;
            event = new CustomEvent('bumper-responsive-image-loaded', {
              detail: {
                img: img
              }
            });
            return img.dispatchEvent(event);
          });
          img.setAttribute('data-bumper-breakpoint', breakpoint);
          img.setAttribute('src', fullUrl);
        } else {
          img = document.createElement('img');
          img.addEventListener('load', function() {
            var event, src;
            src = this.getAttribute('src');
            el.setAttribute('data-bumper-breakpoint', breakpoint);
            el.style.backgroundImage = "url(" + src + ")";
            el.style.width = img.width + "px";
            el.style.height = img.height + "px";
            event = new CustomEvent('bumper-responsive-image-loaded', {
              detail: {
                img: img
              }
            });
            return el.dispatchEvent(event);
          });
          img.setAttribute('src', fullUrl);
        }
        return fullUrl;
      };

      BumperResponsiveImage.prototype.getUrl = function(el, breakpoint) {
        var fullUrl, params, ref, url, urlParams;
        if (breakpoint == null) {
          breakpoint = 'default';
        }
        url = el.getAttribute("data-bumper-responsive-image-url-" + breakpoint) || el.getAttribute('data-bumper-responsive-image-url');
        params = el.getAttribute("data-bumper-responsive-image-url-params-" + breakpoint) || el.getAttribute('data-bumper-responsive-image-url-params');
        if (!url) {
          throw new Error("data-bumper-responsive-image-url[-" + breakpoint + "] is not set.");
        }
        urlParams = url.split('?');
        if (urlParams.length > 1) {
          url = urlParams[0];
          params = params ? urlParams[1] + "&" + params : urlParams[1];
        }
        fullUrl = params ? url + "?" + params : url;
        fullUrl = ((ref = window.Bumper.Dom) != null ? ref.getElementData(fullUrl, el) : void 0) || fullUrl;
        return fullUrl;
      };

      return BumperResponsiveImage;

    })(Core.Module);
    window.Bumper || (window.Bumper = {});
    (base = window.Bumper).Responsive || (base.Responsive = {});
    return (base1 = window.Bumper.Responsive).Image || (base1.Image = new BumperResponsiveImage);
  });

}).call(this);
