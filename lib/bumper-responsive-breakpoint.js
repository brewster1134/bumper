// Generated by CoffeeScript 1.9.0

/*
 * * bumper | responsive | breakpoint
 * * https://github.com/brewster1134/bumper
 * *
 * * @version 2.0.3
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['bumper-core'], function() {
        return factory();
      });
    } else {
      return factory();
    }
  })(this, function() {
    var BumperResponsiveBreakpoint, _base, _base1;
    BumperResponsiveBreakpoint = (function() {
      function BumperResponsiveBreakpoint() {}

      BumperResponsiveBreakpoint.prototype.setBreakpoints = function(breakpoints) {
        var data, name;
        if (typeof breakpoints !== 'object') {
          throw 'breakpoints must be an object';
        }
        for (name in breakpoints) {
          data = breakpoints[name];
          if (data.min === void 0) {
            throw "breakpoint " + name + " must have a min value";
          }
          if (data.max === void 0) {
            throw "breakpoint " + name + " must have a max value";
          }
        }
        return this.list = breakpoints;
      };

      BumperResponsiveBreakpoint.prototype.getCurrent = function() {
        var data, name, width, _ref;
        width = window.innerWidth;
        _ref = this.list;
        for (name in _ref) {
          data = _ref[name];
          if (width >= data.min && width <= data.max) {
            return this.current = name;
          }
        }
      };

      BumperResponsiveBreakpoint.prototype.setCurrentFunction = function(func) {
        if (typeof func !== 'function') {
          throw 'Must be a function!';
        }
        return this.getCurrent = func;
      };

      BumperResponsiveBreakpoint.prototype.checkBreakpointChange = function() {
        var bp, currentBp, event;
        currentBp = this.current;
        if (this.getCurrent() === currentBp) {
          return false;
        }
        bp = {};
        bp[this.current] = this.list[this.current];
        event = new CustomEvent('bumper-responsive-breakpoint-change', {
          detail: bp
        });
        return window.dispatchEvent(event);
      };

      return BumperResponsiveBreakpoint;

    })();
    window.Bumper || (window.Bumper = {});
    (_base = window.Bumper).Responsive || (_base.Responsive = {});
    return (_base1 = window.Bumper.Responsive).Breakpoint || (_base1.Breakpoint = new BumperResponsiveBreakpoint);
  });

}).call(this);
