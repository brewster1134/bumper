// Generated by CoffeeScript 1.7.1

/*
 * * bumper core
 * * https://github.com/brewster1134/bumper
 * *
 * * @version 1.0.2
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  var __slice = [].slice;

  (function(root, factory) {
    var _base;
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], function($) {
        return factory($);
      });
    } else {
      root.Bumper || (root.Bumper = {});
      (_base = root.Bumper).Responsive || (_base.Responsive = {});
      return root.Bumper.Core = factory(jQuery);
    }
  })(this, function($) {
    var BumperCore;
    return BumperCore = (function() {
      function BumperCore() {}

      BumperCore.prototype.combineParams = function() {
        var paramArray, params;
        params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        paramArray = params.filter(function(p) {
          return !!p;
        });
        if (paramArray.length) {
          return "?" + (paramArray.join('&'));
        } else {
          return '';
        }
      };

      BumperCore.prototype.interpolateElementAttrs = function(string, $rootEl) {
        var $elements, arg, args, index, match, matches, method, newArg, regex, splitArray, _i, _j, _len, _len1, _ref;
        regex = /\{([^&]+)\}/g;
        matches = string.match(/\{([^&]+)\}/g);
        if (!matches) {
          return string;
        }
        for (_i = 0, _len = matches.length; _i < _len; _i++) {
          match = matches[_i];
          splitArray = match.replace(/[{}]/g, '').split(':');
          $elements = $rootEl ? $rootEl.closest("" + splitArray[0]) : $();
          $elements = $elements.add("" + splitArray[0]);
          if (!$elements.length) {
            console.warn("No element for `" + splitArray[0] + "` found.");
            return;
          }
          args = splitArray[1].split(',');
          method = args.shift();
          for (index = _j = 0, _len1 = args.length; _j < _len1; index = ++_j) {
            arg = args[index];
            newArg = (function() {
              switch (arg) {
                case 'true':
                  return true;
                case 'false':
                  return false;
                default:
                  return arg;
              }
            })();
            args[index] = newArg;
          }
          string = string.replace(match, (_ref = $elements.first())[method].apply(_ref, args));
        }
        return string;
      };

      return BumperCore;

    })();
  });

}).call(this);
