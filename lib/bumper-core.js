// Generated by CoffeeScript 1.9.3

/*
 * * bumper core
 * * https://github.com/brewster1134/bumper
 * *
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  (function(factory) {
    if (typeof define !== "undefined" && define !== null ? define.amd : void 0) {
      return define([], function() {
        return factory();
      });
    } else {
      return factory();
    }
  })(function() {
    var BumperCore, base;
    BumperCore = (function() {
      var BumperModule;

      function BumperCore() {}

      BumperCore.prototype.version = '3.1.4';

      BumperCore.prototype.castType = function(string, type) {
        if (type) {
          switch (type) {
            case 'boolean':
              switch (string) {
                case 'true':
                  return true;
                case 'false':
                  return false;
              }
              break;
            case 'integer':
              return parseInt(string);
            case 'float':
              return parseFloat(string);
            default:
              return string;
          }
        } else {
          switch (string) {
            case 'true':
              return true;
            case 'false':
              return false;
            default:
              return string;
          }
        }
      };

      BumperCore.prototype.Options = {};

      BumperCore.prototype.Module = BumperModule = (function() {
        BumperModule.prototype.options = {};

        function BumperModule() {
          var i, len, name, names, namespace, value;
          names = this.constructor.name.replace(/([A-Z])/g, function($1) {
            return '.' + $1;
          }).replace(/^\.Bumper\./, '').split('.');
          namespace = window.Bumper.Core.Options;
          for (i = 0, len = names.length; i < len; i++) {
            name = names[i];
            value = name === names.slice(-1)[0] ? this.options : {};
            namespace = namespace[name] || (namespace[name] = value);
          }
        }

        BumperModule.prototype.setOption = function(option, value) {
          return this.options[option] = value;
        };

        return BumperModule;

      })();

      return BumperCore;

    })();
    window.Bumper || (window.Bumper = {});
    return (base = window.Bumper).Core || (base.Core = new BumperCore);
  });

}).call(this);
