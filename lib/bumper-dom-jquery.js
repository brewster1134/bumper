// Generated by CoffeeScript 1.9.0

/*
 * * bumper | dom | jquery
 * * https://github.com/brewster1134/bumper
 * *
 * * @version 2.0.3
 * * @author Ryan Brewster
 * * Copyright (c) 2014
 * * Licensed under the MIT license.
 */

(function() {
  (function(root, factory) {
    if (typeof define === 'function' && define.amd) {
      return define(['jquery'], function($) {
        return factory($);
      });
    } else {
      return factory(jQuery);
    }
  })(this, function($) {
    var BumperDom;
    BumperDom = (function() {
      function BumperDom() {}

      BumperDom.prototype.interpolateElementAttrs = function(string, rootEl) {
        var $element, $rootEl, arg, args, index, match, matches, method, newArg, regex, splitArray, _i, _j, _len, _len1;
        $rootEl = $(rootEl);
        regex = /\{([^&]+)\}/g;
        matches = string.match(/\{([^&]+)\}/g);
        if (!matches) {
          return string;
        }
        for (_i = 0, _len = matches.length; _i < _len; _i++) {
          match = matches[_i];
          splitArray = match.replace(/[{}]/g, '').split(':');
          $element = $rootEl.closest("" + splitArray[0]);
          if (!$element.length) {
            $element = $("" + splitArray[0]).first();
          }
          if (!$element.length) {
            $element = $rootEl.parent();
          }
          if (!$element.length) {
            throw "No element for `" + splitArray[0] + "` found.";
          }
          args = splitArray[1].split(',');
          method = args.shift();
          for (index = _j = 0, _len1 = args.length; _j < _len1; index = ++_j) {
            arg = args[index];
            newArg = (function() {
              switch (arg) {
                case 'true':
                  return true;
                case 'false':
                  return false;
                default:
                  return arg;
              }
            })();
            args[index] = newArg;
          }
          string = string.replace(match, $element[method].apply($element, args));
        }
        return string;
      };

      return BumperDom;

    })();
    window.Bumper || (window.Bumper = {});
    if (window.Bumper.Dom) {
      console.warn('There is already a dom handler loaded', window.Bumper.Dom);
      console.warn('It will be replaced by the jQuery handler.');
    }
    return window.Bumper.Dom = new BumperDom;
  });

}).call(this);
